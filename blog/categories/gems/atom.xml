<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gems | Rails por Dentro]]></title>
  <link href="http://rails-por-dentro.github.com/blog/categories/gems/atom.xml" rel="self"/>
  <link href="http://rails-por-dentro.github.com/"/>
  <updated>2012-01-11T02:43:43-02:00</updated>
  <id>http://rails-por-dentro.github.com/</id>
  <author>
    <name><![CDATA[Reinaldo Junior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extendendo o Ruby com RubyGems: Parte 1]]></title>
    <link href="http://rails-por-dentro.github.com/2012/01/10/extendendo-o-ruby-com-rubygems-parte-1/"/>
    <updated>2012-01-10T23:26:00-02:00</updated>
    <id>http://rails-por-dentro.github.com/2012/01/10/extendendo-o-ruby-com-rubygems-parte-1</id>
    <content type="html"><![CDATA[<p><a href="https://rubygems.org/">RubyGems</a> é um sistema de empacotamento e distribuição de bibliotecas em Ruby. Ele possui recursos como versionamento, dependência entre bibliotecas, distribuição de executáveis, entre outros.</p>

<p>Neste artigo veremos como gerenciar pacotes rubygems e utilizá-los em seus programas.</p>

<!-- more -->


<h2>O ambiente RubyGems</h2>

<p>O RubyGems é composto de:</p>

<ol>
<li>o aplicativo de gerenciamento chamado <code>gem</code>.</li>
<li>as bibliotecas instaladas, chamadas de <code>gems</code>.</li>
<li>a biblioteca em Ruby chamada <code>rubygems</code>.</li>
</ol>


<p>Pessoalmente me referencio a eles como <strong>o</strong> <em>(aplicativo)</em> gem e <strong>as</strong> <em>(bibliotecas)</em> gems. Sendo assim, digo que o <code>gem</code> (aplicativo) possui diversos comandos para gerenciamento das <code>gems</code> (bibliotecas), ou ainda, que o <code>gem</code> (aplicativo) gerencia as <code>gems</code> (bibliotecas).</p>

<p>Os comandos do aplicativo <code>gem</code> podem ser divididos em duas categorias: comandos para gerenciamento de <code>gems</code> e comandos para desenvolvimento de <code>gems</code>.</p>

<h2>Gerenciando gems</h2>

<p>Os principais comandos de gerenciamento de <code>gems</code> são:</p>

<p><em>(<strong>Nota:</strong> dependendo do seu sistema você precisará executar esses comandos como super usuário/administrador)</em></p>

<h4><code>gem install</code></h4>

<p>Instala uma <code>gem</code> (e suas dependências).<br/>
<strong>Sintaxe:</strong> <code>gem install nome_da_gem</code></p>

<p><code>console Instalando a gem sinatra
~ $ gem install sinatra
Fetching: rack-1.4.0.gem (100%)
Fetching: rack-protection-1.2.0.gem (100%)
Fetching: tilt-1.3.3.gem (100%)
Fetching: sinatra-1.3.2.gem (100%)
Successfully installed rack-1.4.0
Successfully installed rack-protection-1.2.0
Successfully installed tilt-1.3.3
Successfully installed sinatra-1.3.2
4 gems installed
Installing ri documentation for rack-1.4.0...
Installing ri documentation for rack-protection-1.2.0...
Installing ri documentation for tilt-1.3.3...
Installing ri documentation for sinatra-1.3.2...
Installing RDoc documentation for rack-1.4.0...
Installing RDoc documentation for rack-protection-1.2.0...
Installing RDoc documentation for tilt-1.3.3...
Installing RDoc documentation for sinatra-1.3.2...
</code></p>

<p>Observe que ao instalar a gem <em>sinatra</em>, várias outras gems foram instaladas automaticamente (suas dependências). Para cada gem instalada (inclusive as dependências) as seguintes operações serão realizadas:</p>

<ol>
<li>Download da gem</li>
<li>Instalação da gem</li>
<li>Instalação das documentações estática (<a href="https://github.com/rdoc/rdoc">RDoc</a>) e interativa (ri)</li>
</ol>


<p>O comando <code>gem install</code> sempre instala a versão mais recente das gems. Caso deseje instalar uma versão específica, use a opção <code>--version</code>:</p>

<p><code>console Instalando uma versão específica
~ $ gem install sinatra --version 1.0.0
Fetching: sinatra-1.0.gem (100%)
Successfully installed sinatra-1.0
1 gem installed
Installing ri documentation for sinatra-1.0...
Installing RDoc documentation for sinatra-1.0...
</code></p>

<h4><code>gem uninstall</code></h4>

<p>Desinstala uma <code>gem</code> (e <strong>NÃO</strong> suas dependências).<br/>
<strong>Sintaxe:</strong> <code>gem uninstall nome_da_gem</code></p>

<p><code>console Desinstalando a gem sinatra
~ $ gem uninstall sinatra
Successfully uninstalled sinatra-1.3.2
</code></p>

<p>O comando <code>uninstall</code> <strong>NÃO</strong> irá desinstalar nenhuma das dependências. Isso porque "pode ser" que alguma dependência seja utilizada por outra gem.</p>

<p>Caso você possua mais de uma versão da mesma gem, você deverá selecionar qual versão quer desinstalar: interativamente ou manualmente.</p>

<p>``` console Desinstalando com várias versões
~ $ gem uninstall sinatra</p>

<p>Select gem to uninstall:
 1. sinatra-1.0
 2. sinatra-1.3.2
 3. All versions</p>

<blockquote><p>1
Successfully uninstalled sinatra-1.0</p></blockquote>

<p>~ $ gem uninstall sinatra --version  1.3.2
Successfully uninstalled sinatra-1.3.2
```</p>

<p>Você ainda pode remover todas as versões da gem usando a opção <code>--all</code></p>

<h4><code>gem outdated</code></h4>

<p>Exibe quais gems estão desatualizadas (se há uma versão mais recente disponível).
<strong>Sintaxe:</strong> <code>gem outdated</code></p>

<p>Se eu tiver instalado apenas a versão 1.0 da gem sinatra o resultado seria esse:</p>

<p><code>
~ $ gem outdated
sinatra (1.0 &lt; 1.3.2)
</code></p>

<h4><code>gem update</code></h4>

<p>Atualiza uma (ou mais) gems para a versão mais recente.
<strong>Sintaxe:</strong> <code>gem update uma_gem outra_gem ...</code></p>

<p>Supondo ainda o caso anterior eu poderia atualizar a gem sinatra para a versão mais recente com o comando</p>

<p><code>
~ $ gem update sinatra
Updating installed gems
Updating sinatra
Fetching: sinatra-1.3.2.gem (100%)
Successfully installed sinatra-1.3.2
Gems updated: sinatra
Installing ri documentation for sinatra-1.3.2...
Installing RDoc documentation for sinatra-1.3.2...
</code></p>

<p>Caso deseje atualizar todas as gems, você pode usar o comando sem especificar nenhuma gem: <code>gem update</code>.</p>

<h4><code>gem server</code></h4>

<p>Inicia o servidor de documentação (e repositório) de gems
<strong>Sintaxe:</strong> <code>gem server</code></p>

<p><img src="/images/posts/rubygems_parte1/gem_server.png"></p>

<p>O servidor ira iniciar na porta <code>8808</code>. Esse servidor é mais comumente usado para consultar a documentação instalada com as gems.</p>

<p>Uma outra utilidade deste servidor é a instalação de gems. Se um computador na sua rede pode instalar as gems a partir do seu computador (oa invés da internet), usando o comando <code>gem install nome_da_gem --source http://seu_computador:8808</code>.</p>

<h2>Utilizando gems</h2>

<p>O ruby possui o comando <code>require</code> que inclui arquivos externos ao seu arquivo atual. Por padrão, o interpretador Ruby irá procurar pelo arquivo nos diretórios especificados pela variávei <code>$LOAD_PATH</code>. Desse modo, usar bibliotecas externas (de maneira modular) exige o trabalho de:</p>

<ol>
<li>Adicionar as bibliotecas ao <code>$LOAD_PATH</code></li>
<li>Incluir a biblioteca</li>
</ol>


<p>Quando se adiciona questões como gerenciamento de versões e dependências a coisa complica ainda mais.</p>

<p>A bblioteca <code>rubygems</code> fornece uma solução fácil para utilizar gems em seus programas.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Utilizando a gem sinatra (usando_sinatra.rb)</span> <a href='/downloads/code/001/usando_sinatra.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/hi&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Começamos incluindo a biblioteca <code>rubygems</code>. Ela se encarrega de modificar o <code>require</code> padrão do Ruby para tratar gems e dependências.</p>

<p>Em seguida, incluimos a biblioteca <code>sinatra</code>. Com o rubygems carregado, esse require sabe onde encontrar a biblioteca sinatra.</p>

<p>Finalmente utilizamos a biblioteca sinatra. Observe que o código é executado normalmente no interpretador Ruby, sem nenhum parâmetro adicional ou configuração prévia. Precisamos apenas ter a gem sinatra instalada via Rubygems.</p>

<pre><code>$ ruby usando_sinatra.rb 
[2012-01-11 01:20:56] INFO  WEBrick 1.3.1
[2012-01-11 01:20:56] INFO  ruby 1.9.2 (2011-07-09) [x86_64-darwin10.8.0]
== Sinatra/1.3.2 has taken the stage on 4567 for development with backup from WEBrick
[2012-01-11 01:20:56] INFO  WEBrick::HTTPServer#start: pid=30324 port=4567
</code></pre>

<p>Observe que a versão utilizada é a <code>1.3.2</code> (a mais recente) da gem.</p>

<p>A biblioteca <code>rubygems</code> também fornece facilidades para o gerenciamento de versões. O exemplo a seguir mostra como utilizar uma versão específica (1.0) da gem sinatra.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Utilizando uma versão específica da gem sinatra (usando_sinatra_10.rb)</span> <a href='/downloads/code/001/usando_sinatra_10.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/hi&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>$ ruby usando_sinatra_10.rb
== Sinatra/1.0 has taken the stage on 4567 for development with backup from WEBrick
[2012-01-11 01:20:40] INFO  WEBrick 1.3.1
[2012-01-11 01:20:40] INFO  ruby 1.9.2 (2011-07-09) [x86_64-darwin10.8.0]
[2012-01-11 01:20:40] INFO  WEBrick::HTTPServer#start: pid=30310 port=4567
</code></pre>

<h2>Entendendo o ambiente</h2>

<p>Para entender melhor o funcionamento do Rubygems vamos examinar o ambiente que o aplicativo <code>gem</code> e a biblioteca <code>rubygems</code> compartilham.</p>

<p>Veja a saída do comando <code>gem environment</code>:</p>

<pre><code>~ $ gem environment
RubyGems Environment:
  - RUBYGEMS VERSION: 1.3.6
  - RUBY VERSION: 1.8.7 (2010-01-10 patchlevel 249) [universal-darwin11.0]
  - INSTALLATION DIRECTORY: /Library/Ruby/Gems/1.8
  - RUBY EXECUTABLE: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby
  - EXECUTABLE DIRECTORY: /usr/bin
  - RUBYGEMS PLATFORMS:
    - ruby
    - universal-darwin-11
  - GEM PATHS:
     - /Library/Ruby/Gems/1.8
     - /Users/juniorz/.gem/ruby/1.8
     - /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/gems/1.8
  - GEM CONFIGURATION:
     - :update_sources =&gt; true
     - :verbose =&gt; true
     - :benchmark =&gt; false
     - :backtrace =&gt; false
     - :bulk_threshold =&gt; 1000
     - "install" =&gt; "--no-rdoc --no-ri"
     - "update" =&gt; "--no-rdoc --no-ri"
  - REMOTE SOURCES:
     - http://rubygems.org/
</code></pre>

<p>As <code>gems</code> são organizadas em <code>GEM PATHS</code>. O aplicativo <code>gem</code> instala as gems em um desses diretórios e a biblioteca <code>rubygems</code> procura as gems em todos esses diretórios.</p>

<p>Um <code>Gem Path</code> tem a seguinte estrutura:</p>

<ul>
<li><p><strong>bin/</strong><br/>
Diretório onde os executáveis instalados pelas gems residem.</p></li>
<li><p><strong>cache/</strong><br/>
Diretório onde os pacotes <code>.gem</code> ficam armazenados. Ao usar <code>gem server</code> como um servidor local de instalação, as gems em cache serão disponibilizadas para instalação.</p></li>
<li><p><strong>doc/</strong><br/>
Diretório onde as documentações são instaladas. Cada gem (e cada versão) possui um diretório separado.</p></li>
<li><p><strong>gems/</strong><br/>
Diretório onde as gems são instaladas. Cada gem (e cada versão) possui um diretório separado. Basicamente é o pacote <code>.gem</code> descompactado.</p></li>
<li><p><strong>specifications/</strong><br/>
Todas as especificações de gems (arquivos <code>.gemspec</code>) ficam nesse diretório. Os arquivos <code>.gemspec</code> possuem meta-informações das gems (há um arquivo pra cada gem e cada versão).</p></li>
</ul>


<p>Olhando o ambiente em questão vemos que há dois diretórios bem distintos:</p>

<ul>
<li><strong>/Library/Ruby/Gems/1.8</strong> - Diretório com escrita somente para super usuário. Gems instaladas <strong>com</strong> <code>sudo gem install</code> vão nesse gem path e estão disponíveis para qualquer usuário do sistema.</li>
<li><strong>/Users/juniorz/.gem/ruby/1.8</strong> - Diretório com escrita somente para o meu usuário. Gems instaladas com <code>gem install</code> vão nesse gem path e estão disponíveis apenas para o meu usuário.</li>
</ul>


<h2>Conclusão</h2>

<p>O RubyGems é o fundamento da modularidade em nível de bibliotecas. No próximo artigo, veremos como criar suas próprias <code>gems</code> e como gerenciar as dependências de seus projetos usando <a href="http://gembundler.com/">Bundler</a>.</p>
]]></content>
  </entry>
  
</feed>
